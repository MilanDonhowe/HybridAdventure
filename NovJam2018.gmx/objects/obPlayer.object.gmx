<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spPlayerArm</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>obBounce</parentName>
  <maskName>spPlayer</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// setup create variables
x += 2

hp = 6;
spd = 3;
jumpSpd = 0;
grav = 4;
gravConst = grav;
falling = false;
times = 0;

global.arm = false;

damage = false;

scale = 3;
image_xscale = scale;
image_yscale = scale;
sprite_index = spPlayer;
/*
if (place_meeting(x,y, obTransPaddle)) {
    while(place_meeting(x,y, obTransPaddle)) {
        y -= 1;
    }
    grav = 0;
    jumpSpd = 10;
    alarm[0] = 20;
}
*/


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// end damage stage

damage = false;
grav = gravConst;
jumpSpd = 0;
/*
if ((hp &lt; 0) or (hp == 0)){
    global.theScore = 0;
    room_restart();
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>grav = gravConst;
jumpSpd = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(abs(image_xscale) != abs(scale)) image_xscale = scale;
if(abs(image_yscale) != abs(scale)) image_yscale = scale;

// inputs 

left = keyboard_check(ord('A')) or keyboard_check(vk_left);
right = keyboard_check(ord('D')) or keyboard_check(vk_right);




// vertical collisions

if(place_meeting(x, y, obWall)){
    while(place_meeting(x, y, obWall)){
        y += 1;
    }
}

if(!place_meeting(x, y+1, obWall)){
    y += grav;
    
    falling = true;
    
    if(global.arm == false){
        sprite_index = spPlayerFalling;
    }
        
    if(place_meeting(x, y, obWall)){
        //y = yprevious;
        while(place_meeting(x, y, obWall)){
            y -= 1;
        }
        
    }
    
    if (place_meeting(x,y+1,obWall)){
        
        // play the bounce animation
        if(global.arm == false){
            instance_change(obBounce, true);
        }
    }
} else {
    falling = false;
    image_speed = 0;
    if(global.arm == true){
        sprite_index = spPlayerArm;
    } else {
        sprite_index = spPlayer;
    }
}


// left-right movement and collisions (rudimentary)

if (global.stay == false){

if ((left) &amp;&amp; (!place_meeting(x-spd, y, obWall)) ){

    if (falling == false){
        //animation
        if (global.arm == true){
            sprite_index = spPlayerMoveArm;
        } else {
            sprite_index = spPlayerMove;
        }
       
        image_xscale = -scale;
    }
    
    if(global.arm == true) {
        image_xscale = -scale;
    }
    
    // movement left
    x -= spd;
    
    //move background?
    if (room != rmIntro){
        background_x[1] += spd/8;
    }
    //background_x[0] -= spd/12;

}
if ((right) &amp;&amp; (!place_meeting(x+spd, y, obWall))){
    
    if (falling == false){
        //animation
        if (global.arm == true){
            sprite_index = spPlayerMoveArm;
        } else {
            sprite_index = spPlayerMove;
        }
        image_xscale = scale;
    }
    
    if(global.arm == true) {
        image_xscale = scale;
    }
    
    // movement right
    x += spd;
    
    // move background?
    if(room != rmIntro){
        background_x[1] -= spd/8;
    }
    //background_x[0] += spd/12;
}

}
// punching

punch = keyboard_check_pressed(vk_space);


if ( (punch) &amp;&amp; (falling == false) &amp;&amp; (global.arm == true) ) {
    // change depending on direction...
    instance_change(obPunch, true);

}


// launch pads

if(place_meeting(x,y,obLaunch)){
    audio_play_sound(sndLaunchPad, 3, false);
    grav = 0;
    jumpSpd = 10;
    alarm[0] = 20;
    y -= jumpSpd;
}

y -= jumpSpd;

// paddle transformation

//if (place_meeting(x, y, obTransPaddle)) {
 //   instance_destroy();
//}



//portal

/*
if(place_meeting(x,y, obPortal)){
    room_goto_next();
}
*/





</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///take damage...


// from the walking things! 
if ((place_meeting(x, y, obDamage)) &amp;&amp; (damage != true)){
    alarm[1] = 30;
    damage = true;
    
    audio_play_sound(sndPlayerDamage, 1, false);
    
    hp -= 1;
    
    grav = 0;
    jumpSpd = 10;
    y -= jumpSpd;
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_alpha(1);
switch(hp){
    case 6:
        draw_sprite(spHP, 0, view_wview[0]/8, view_hview[0]/6);
        break;
    case 5:
        draw_sprite(spHP, 1, view_wview[0]/8, view_hview[0]/6);
        break;
    case 4:
        draw_sprite(spHP, 2, view_wview[0]/8, view_hview[0]/6);
        break;
    case 3:
        draw_sprite(spHP, 3, view_wview[0]/8, view_hview[0]/6);
        break;
    case 2:
        draw_sprite(spHP, 4, view_wview[0]/8, view_hview[0]/6);
        break;
    case 1:
        draw_sprite(spHP, 5, view_wview[0]/8, view_hview[0]/6);
        break;
    case 0:
        global.theScore = 0;
        hp = 6;
        room_restart();
        break;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>223</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_current_room</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="9" enumb="78">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (room_exists(room+1)){
    room_goto_next();
    global.stay = false; 
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>332</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_end_game</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>-1</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
